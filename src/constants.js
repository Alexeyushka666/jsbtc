var INT_BASE32_MAP = {};
var BASE32_INT_MAP = {};

var BASE32CHARSET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
var BASE32CHARSET_UPCASE = "QPZRY9X8GF2TVDW0S3JN54KHCE6MUA7L";

for (let i = 0; i < BASE32CHARSET.length; i++) {
    INT_BASE32_MAP[BASE32CHARSET[i]] = i;
    BASE32_INT_MAP[i] = BASE32CHARSET.charCodeAt(i);
}
for (let i = 0; i < BASE32CHARSET_UPCASE.length; i++) {
    INT_BASE32_MAP[BASE32CHARSET_UPCASE[i]] = i;
}
const MAINNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX = '5';
const MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX = 'K';
const MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX_2 = 'L';
const TESTNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX = '9';
const TESTNET_PRIVATE_KEY_COMPRESSED_PREFIX = 'c';
const MAINNET_ADDRESS_PREFIX = '1';
const TESTNET_ADDRESS_PREFIX = 'm';
const TESTNET_ADDRESS_PREFIX_2 = 'n';
const MAINNET_SCRIPT_ADDRESS_PREFIX = '3';
const TESTNET_SCRIPT_ADDRESS_PREFIX = '2';

module.exports = {
    BASE32CHARSET: BASE32CHARSET,
    BASE32CHARSET_UPCASE: BASE32CHARSET_UPCASE,
    INT_BASE32_MAP: INT_BASE32_MAP,
    BASE32_INT_MAP: BASE32_INT_MAP,
    MAINNET_ADDRESS_PREFIX: MAINNET_ADDRESS_PREFIX,
    TESTNET_ADDRESS_PREFIX: TESTNET_ADDRESS_PREFIX,
    TESTNET_ADDRESS_PREFIX_2: TESTNET_ADDRESS_PREFIX_2,
    MAINNET_SCRIPT_ADDRESS_PREFIX: MAINNET_SCRIPT_ADDRESS_PREFIX,
    TESTNET_SCRIPT_ADDRESS_PREFIX: TESTNET_SCRIPT_ADDRESS_PREFIX,
    MAINNET_SEGWIT_ADDRESS_PREFIX: 'bc',
    TESTNET_SEGWIT_ADDRESS_PREFIX: 'tb',
    MAINNET_ADDRESS_BYTE_PREFIX: [0],
    TESTNET_ADDRESS_BYTE_PREFIX: [111],
    MAINNET_SCRIPT_ADDRESS_BYTE_PREFIX: [5],
    TESTNET_SCRIPT_ADDRESS_BYTE_PREFIX: [196],
    MAINNET_SEGWIT_ADDRESS_BYTE_PREFIX: [3, 3, 0, 2, 3],
    TESTNET_SEGWIT_ADDRESS_BYTE_PREFIX: [3, 3, 0, 20, 2],
    TESTNET_PRIVATE_KEY_BYTE_PREFIX: [0xef],
    MAINNET_PRIVATE_KEY_BYTE_PREFIX: [0x80],
    MAINNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX: MAINNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX,
    MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX: MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX,
    MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX_2: MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX_2,
    TESTNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX: TESTNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX,
    TESTNET_PRIVATE_KEY_COMPRESSED_PREFIX: TESTNET_PRIVATE_KEY_COMPRESSED_PREFIX,
    ADDRESS_PREFIX_LIST: [MAINNET_ADDRESS_PREFIX,
        TESTNET_ADDRESS_PREFIX,
        TESTNET_ADDRESS_PREFIX_2,
        MAINNET_SCRIPT_ADDRESS_PREFIX,
        TESTNET_SCRIPT_ADDRESS_PREFIX],
    PRIVATE_KEY_PREFIX_LIST: [MAINNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX,
        MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX,
        MAINNET_PRIVATE_KEY_COMPRESSED_PREFIX_2,
        TESTNET_PRIVATE_KEY_UNCOMPRESSED_PREFIX,
        TESTNET_PRIVATE_KEY_COMPRESSED_PREFIX],
    SCRIPT_TYPES: {
        "P2PKH": 0,
        "P2SH": 1,
        "PUBKEY": 2,
        "NULL_DATA": 3,
        "MULTISIG": 4,
        "P2WPKH": 5,
        "P2WSH": 6,
        "NON_STANDARD": 7,
        "NULL_DATA_NON_STANDARD": 8
    },
    SCRIPT_N_TYPES: {0: "P2PKH",
        1: "P2SH",
        2: "PUBKEY",
        3: "NULL_DATA",
        4: "MULTISIG",
        5: "P2WPKH",
        6: "P2WSH",
        7: "NON_STANDARD",
        8: "NULL_DATA_NON_STANDARD"},
    GAMMA_NUM_LN: 607 / 128,
    GAMMA_TABLE_LN: [0.99999999999999709182,
        57.156235665862923517,
        -59.597960355475491248,
        14.136097974741747174,
        -0.49191381609762019978,
        0.33994649984811888699e-4,
        0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
        0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
        0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
        0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
        0.36899182659531622704e-5],
    MACHEP: 1.11022302462515654042E-16,
    MAXLOG: 7.09782712893383996732E2,
    ECDSA_SEC256K1_ORDER: 'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141',
    SECP256K1_CONTEXT_VERIFY: (1 << 0) | (1 << 8),
    SECP256K1_CONTEXT_SIGN: (1 << 0) | (1 << 9),
    SECP256K1_CONTEXT_NONE: (1 << 0),
    SECP256K1_EC_COMPRESSED: (1 << 1) | (1 << 8),
    SECP256K1_EC_UNCOMPRESSED: (1 << 1)
};
